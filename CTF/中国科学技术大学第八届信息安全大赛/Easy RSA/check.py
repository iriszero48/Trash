import sympy
from operator import mul
from functools import reduce


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return g, x - (b // a) * y, y


def inverse_mod(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m


def FuckRsaFactored(primes, n, c, e):
    d = inverse_mod(e, reduce(mul, [i - 1 for i in primes]))
    m = pow(c, d, n)
    return m


def modFact(n, p):
    if (p <= n):
        return 0
    res = (p - 1)
    for i in range(n + 1, p):
        res = (res * inverse_mod(i, p)) % p
    return res


e = 65537


def get_p():
    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451
    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439
    # value_p = sympy.nextprime((math.factorial(y)) % x)  # Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征
    return sympy.nextprime(modFact(y, x))


def get_q():
    # value = [getPrime(256)]
    value = [80096058210213458444437404275177554701604739094679033012396452382975889905121]
    for i in range(1, 10):
        value.append(sympy.nextprime(value[i - 1]))
    # q[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967
    assert value[-1] == 80096058210213458444437404275177554701604739094679033012396452382975889905967
    n = 1
    for i in range(10):
        n = n * value[i]
    # q = getPrime(512)
    q = FuckRsaFactored(value, n,

                        e)
    # q = 774618558248818670631844032267012933902957533188887861123117351257918290746681030265456412784328215912450280395013228966479783450877253924424423961716903439226728415764994065594433231325380628079830946408174666851026540651999835226740834648841884584099434263657860352894358875465848621861291648191833890366381090644139344996600343764226314671451476799640110582009409520743816771317014575031963482104152201836469468926224678429266089921372754086505357097142947219341363848966815329678678379841179969404701386591136776428275184515113810107722648703989768128328235085899193443308603379772286906627487171331652282150891526597993057659101306912979951255724909969698121538885140089890845520476265621512764521645257280377023106240706462006692932021286389765181708059526596297
    value_q = pow(q, e, n)
    # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819
    assert value_q == 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819
    return sympy.nextprime(q)


# this destroyes the rsa cryptosystem
p = get_p()
q = get_q()
n = p * q
print("---- pre ----")
print("p = ", p)
print("q = ", q)
print("n = ", n)
print("e = ", e)

# m = int.from_bytes(open("flag.txt", "rb").read(), "big")
m = FuckRsaFactored([p, q], p * q,
                    110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478,
                    e)
c = pow(m, e, n)
print("c = ", c)
assert c == 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478
# c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478
print("----done----")
print("m = ", m)
print(m.to_bytes(len(hex(m)) // 2 - 1, 'big').decode())
